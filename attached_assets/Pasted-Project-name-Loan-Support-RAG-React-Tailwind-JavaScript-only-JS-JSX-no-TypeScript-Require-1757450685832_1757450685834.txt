Project name: Loan Support RAG (React + Tailwind) — JavaScript only (JS/JSX), no TypeScript

Requirements:

Build a clean, responsive React app with Tailwind CSS (light theme, professional fintech vibe).

Use only JavaScript: create files with .js / .jsx. Do not generate .ts or .tsx.

Use fetch with JSON and a Bearer token from localStorage:

LS_TOKEN → Bearer token header

LS_API_BASE → base API URL (default http://localhost:5000)

Show toast/snackbar for success/error and inline loading spinners on network calls.

Minimal state management with React hooks. No external UI libraries beyond Tailwind.

API Endpoints (with settings.API_PREFIX = /api/v1):

POST /api/v1/ingest
Body: { "path": "app/data/documents" } (optional; default path if omitted)
Response: { "status":"ok", "ingested": { "pages": number, "chunks": number } }

POST /api/v1/chat/ask
Body: { "query": string, "top_k": number }
Response: { "answer": string } ← render only this text (bullets/newlines preserved)

POST /api/v1/eligibility/calculate (if available)
Typical body: { "monthly_income": number, "monthly_obligations": number, "roi": number, "tenure_months": number, "loan_amount": number }
Typical response: { "emi": number, "foir": number, "eligible_loan_amount": number }

GET /api/v1/docs (Swagger)

GET /api/v1/openapi.json

Optional: GET /api/v1/health → { "status": "ok" }

Navigation (top bar or left sidebar):

Settings

Ingest

Ask

Eligibility (optional — auto-hide tab if endpoint missing)

Pages & Behavior:

Settings Page

Inputs:

API Base URL (default http://localhost:5000)

Bearer Token (password input)

Buttons:

Save → persist both to localStorage

Open API Docs → link to ${base}/api/v1/docs

Read-only info section: Current Index Name and Namespace (just placeholders for now).

On save: show success toast.

Ingest Page

Text input: PDF Folder Path (default app/data/documents)

Button: Ingest PDFs → POST ${base}/api/v1/ingest

Headers: Authorization: Bearer ${LS_TOKEN}, Content-Type: application/json

Body: { "path": <inputValue> } (if user empties it, send {} and let backend default)

Show spinner during request; toast on success/failure.

On success, display card with Pages and Chunks counts.

Small helper text: “Re-run ingest after adding/changing PDFs.”

Ask Page

Large single-line input: “Ask a question…”

Optional select/slider: Top K (default 5; values 3–10)

Button: Ask → POST ${base}/api/v1/chat/ask with { query, top_k }

Use Bearer header.

Show spinner while fetching.

Render only the returned answer string. Preserve bullets/newlines (e.g., using <pre> or CSS white-space: pre-wrap), and make it nicely readable.

Footer row: request duration in ms and “Grounded on uploaded PDFs”.

Placeholder toggle (disabled): “Show sources (coming soon)”

Eligibility Page (optional)

Inputs:

Monthly Income

Monthly Obligations

Interest Rate (% p.a.)

Tenure (months)

Loan Amount (optional)

Button: Calculate → POST ${base}/api/v1/eligibility/calculate

Show results card with EMI, FOIR, Eligible Loan Amount (if fields returned).

If the endpoint isn’t present (404), show a helpful banner and suggest enabling it on the backend; keep tab visible but disabled.

Design Details:

Overall light theme; content max-w-[960px] centered; generous spacing.

Use cards with rounded-2xl, soft shadows, adequate padding.

Buttons: subtle hover; inputs: clear focus rings.

Mobile-friendly stacked layout; collapser for side nav on small screens.

Error Handling:

401/403 → show toast “Invalid token. Configure it in Settings.” + link to Settings.

404 on ingest/eligibility → toast “Endpoint not found. Check backend routes or update API prefix.”

5xx or network errors → toast with message; keep last successful result on screen if possible.